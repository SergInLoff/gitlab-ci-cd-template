variables:
  DEPLOY_SERVICE_NAME_PREFIX: ""

.base_deploy_to_swarm_template:
  script:
    - if [[ -z ${VERSION} ]]; then
        echo "The project version isn't defined!";
        exit 1;
      fi;
    - if [[ -z ${SERVICE_NAME} ]]; then
        echo "The service name isn't defined!";
        exit 1;
      elif [[ -z ${REGISTRY_SERVER_HARBOR} ]]; then
        echo "The path of docker registry server isn't defined!";
        exit 1;
      fi;

    - echo "Service version - ${VERSION}"
    - if [[ -z ${IMAGE_LIBRARY} ]]; then
        IMAGE=${SERVICE_NAME};
      else
        IMAGE="${IMAGE_LIBRARY}/${SERVICE_NAME}";
      fi;

    - docker login -u "robot$"$REGISTRY_CI_USER -p $REGISTRY_CI_PASSWORD $REGISTRY_SERVER_HARBOR;
    - docker image pull $REGISTRY_SERVER_HARBOR/${IMAGE}:${CI_ENVIRONMENT_NAME} || true
    - docker tag $REGISTRY_SERVER_HARBOR/${IMAGE}:${CI_ENVIRONMENT_NAME} $REGISTRY_SERVER_HARBOR/${IMAGE}:stable_${CI_ENVIRONMENT_NAME} || true
    
    - docker image pull $REGISTRY_SERVER_HARBOR/${IMAGE}:${VERSION}

    - docker tag $REGISTRY_SERVER_HARBOR/${IMAGE}:${VERSION} $REGISTRY_SERVER_HARBOR/${IMAGE}:${CI_ENVIRONMENT_NAME};
    - docker push $REGISTRY_SERVER_HARBOR/${IMAGE}:${CI_ENVIRONMENT_NAME};

    - if ! [[ "$(docker image inspect $REGISTRY_SERVER_HARBOR/${IMAGE}:${VERSION} --format="1")" == "1" ]]; then
        echo "The image ${IMAGE} isn't  exists!";
        exit 1;
      fi;
    
    - echo ${IMAGE}
    - docker service update --with-registry-auth --image $REGISTRY_SERVER_HARBOR/${IMAGE}:${VERSION} --hostname ${SERVICE_NAME} "accounting-system-${DEPLOY_SERVICE_NAME_PREFIX}_${SERVICE_NAME}"
    - echo "Service ${SERVICE_NAME} updated!"

    - docker push $REGISTRY_SERVER_HARBOR/${IMAGE}:stable_${CI_ENVIRONMENT_NAME} || true

    - if [[ $CI_JOB_STAGE != "deploy-to-production" ]]; then
        exit 0;
      fi;

    # Регистрация версии в сервисе
    - echo "Register version"
    - currentDate="$(date +'%Y-%m-%d %T')"
    - echo $currentDate
    - desc="\"branchName\":\"$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME\",\"mergeRequestUrl\":\"$CI_MERGE_REQUEST_PROJECT_URL/merge_requests/$CI_MERGE_REQUEST_IID\",\"pipelineUrl\":\"$CI_PIPELINE_URL\",\"jobUrl\":\"$CI_JOB_URL\",\"assignee\":\"$CI_MERGE_REQUEST_ASSIGNEES\""
    - echo $desc
    - > 
      curl -X POST "$VERSION_REGISTRATION_SERVICE_PATH" 
      -H "accept: text/plain" 
      -H "Content-Type: application/json-patch+json"
      --data "{\"id\":0,\"serviceCode\":\"$SERVICE_NAME\",\"version\":\"$VERSION\",\"dueDate\":\"$currentDate\",\"description\":{$desc}}"


AccountingSystemDeploy:Test:
  stage: deploy-to-test
  environment: Test
  variables:
    DEPLOY_SERVICE_NAME_PREFIX: "test"
    GIT_CHECKOUT: "false"
  extends: .base_deploy_to_swarm_template
  tags:
    - services-acc-system-test
  when: manual


AccountingSystemDeploy:Staging:
  stage: deploy-to-test
  environment: Staging
  variables:
    DEPLOY_SERVICE_NAME_PREFIX: "staging"
    GIT_CHECKOUT: "false"
  extends: .base_deploy_to_swarm_template
  tags:
    - services-acc-system-staging
  when: manual


AccountingSystemDeploy:Production:
  stage: deploy-to-production
  environment: Production
  variables:
    DEPLOY_SERVICE_NAME_PREFIX: "production"
    GIT_CHECKOUT: "false"
  extends: .base_deploy_to_swarm_template
  tags:
    - services-acc-system-production
  when: manual
